// <auto-generated />
using CapstoneV4.Models.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CapstoneV4.Migrations
{
    [DbContext(typeof(CapstoneDB))]
    partial class CapstoneDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CapstoneV4.Models.DomainModels.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorID"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorID = 1,
                            FirstName = "FName1",
                            LastName = "LName1"
                        },
                        new
                        {
                            AuthorID = 2,
                            FirstName = "FName2",
                            LastName = "LName2"
                        },
                        new
                        {
                            AuthorID = 3,
                            FirstName = "FName3",
                            LastName = "LName3"
                        },
                        new
                        {
                            AuthorID = 4,
                            FirstName = "FName4",
                            LastName = "LName4"
                        });
                });

            modelBuilder.Entity("CapstoneV4.Models.DomainModels.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<string>("GenreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            GenreId = "history",
                            Price = 199.0,
                            Title = "Book1"
                        },
                        new
                        {
                            BookId = 2,
                            GenreId = "scifi",
                            Price = 249.0,
                            Title = "Book2"
                        },
                        new
                        {
                            BookId = 3,
                            GenreId = "history",
                            Price = 199.0,
                            Title = "Book3"
                        },
                        new
                        {
                            BookId = 4,
                            GenreId = "scifi",
                            Price = 249.0,
                            Title = "Book4"
                        });
                });

            modelBuilder.Entity("CapstoneV4.Models.DomainModels.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthor");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 3
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4
                        });
                });

            modelBuilder.Entity("CapstoneV4.Models.DomainModels.Genre", b =>
                {
                    b.Property<string>("GenreId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = "novel",
                            Name = "Novel"
                        },
                        new
                        {
                            GenreId = "memoir",
                            Name = "Memoir"
                        },
                        new
                        {
                            GenreId = "mystery",
                            Name = "Mystery"
                        },
                        new
                        {
                            GenreId = "scifi",
                            Name = "SciFi"
                        },
                        new
                        {
                            GenreId = "history",
                            Name = "History"
                        });
                });

            modelBuilder.Entity("CapstoneV4.Models.DomainModels.Book", b =>
                {
                    b.HasOne("CapstoneV4.Models.DomainModels.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("CapstoneV4.Models.DomainModels.BookAuthor", b =>
                {
                    b.HasOne("CapstoneV4.Models.DomainModels.Author", "Author")
                        .WithMany("BookAuthor")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CapstoneV4.Models.DomainModels.Book", "Book")
                        .WithMany("BookAuthor")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("CapstoneV4.Models.DomainModels.Author", b =>
                {
                    b.Navigation("BookAuthor");
                });

            modelBuilder.Entity("CapstoneV4.Models.DomainModels.Book", b =>
                {
                    b.Navigation("BookAuthor");
                });

            modelBuilder.Entity("CapstoneV4.Models.DomainModels.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
